#!/bin/bash
# vi: fdm=marker

##################
# Constants {{{1 #
##################

PROG_NAME=$(basename $0)
YES=yes
SUCCESS=success
FAILURE=failure
NOARGS=NA
OS=$(uname)

#########################
# Global variables {{{1 #
#########################

DEBUG=0

###################
# Print help {{{1 #
###################

function print_help {
	echo "Usage: $PROG_NAME [options]"
	echo
	echo "   -g, --debug                Debug mode."
	echo "   -h, --help                 Print this help message."
}

############
# Msg {{{1 #
############

function msg {

	local tag=$1
	shift
	local code_level=1
	is_numeric=$(echo $1 | grep '^[0-9]*$')
	if [ -n "$is_numeric" ] ; then
		code_level=$1
		shift
	fi
	local msg=$1

	# Check tag
	if [ -z "$tag" -o \( "$tag" != INFO -a "$tag" != DEBUG -a "$tag" != ERROR \) ] ; then
		echo "ERROR: Unvalid message tag \"$tag\"." >&2
		exit 999
	fi

	# Print message
	[ "$tag" = DEBUG -a "$DEBUG" -lt "$code_level" ] || echo "$tag: $msg" >&2

	# Exit
	[ $tag = ERROR ] && exit $code_level
}

#################
# Requires {{{1 #
#################

function requires {

	local prg=$1

	[ -n "$(which $prg)" ] || msg ERROR "Cannot find $prg. Please install required package."
}

##################
# Read args {{{1 #
##################

function read_args {

	local args="$*" # save arguments for debugging purpose
	
	# Read options
	while true ; do
		shift_count=1
		case $1 in
			-g|--debug)             DEBUG=$((DEBUG + 1)) ;;
			-h|--help)              print_help ; exit 0 ;;
			-|--|--*)               msg ERROR "Illegal option $1." ;;
			-?)                     msg ERROR "Unknown option $1." ;;
			-[^-]*) split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift $shift_count
	done
	shift $((OPTIND - 1))

	# Read remaining arguments
	[ $# -eq 0 ] || msg ERROR "No remaining argument is allowed."

	# Debug
	msg DEBUG 1 "Arguments are : $args"
}

##################################
# Test test-built-container {{{1 #
##################################

function test_test_built_container {

	local success=$1
	local dockerfile=$2
	local cmds_file=$3
	local dockername=$(basename $dockerfile | sed 's/\.[^.]*$//')

	msg INFO "Testing test-built-container with Dockerfile \"$dockerfile\" and commands file \"$cmds_file\", and expecting $success."

	# Create temp dir
	rm -rf test-tmp
	mkdir test-tmp
	cd test-tmp

	# Copy files
	cp ../$dockerfile Dockerfile
	[ -z "$cmds_file" ] || cp ../$cmds_file test_cmds.txt

	# Build docker
	docker build -t $dockername .

	# Run test
	../../test-built-container $dockername
	status=$?
	msg INFO "test-built-container returned status $status"
	if [ "$success" = $SUCCESS ] ; then
		[ $status -eq 0 ] || msg ERROR "test-built-container should return 0 as status."
	else
		[ $status -ne 0 ] || msg ERROR "test-built-container should return a non 0 status."
	fi

	# Leave temp dir
	cd ..
}

#############
# MAIN {{{1 #
#############

# Requirements
requires docker

# Read arguments
read_args "$@"

# TODO Use option to set docker image, otherwise use docker-registry-v2.local:30750/phnmnl/${CONTAINER}
test_test_built_container $SUCCESS res/test-built-container-dockerfile_ls.txt
test_test_built_container $SUCCESS res/test-built-container-dockerfile_df.txt res/test-built-container-cmd_empty.txt
test_test_built_container $SUCCESS res/test-built-container-dockerfile_df.txt res/test-built-container-cmd_arg_h.txt
test_test_built_container $SUCCESS res/test-built-container-dockerfile_sort.txt res/test-built-container-cmd_arg_help.txt
test_test_built_container $SUCCESS res/test-built-container-dockerfile_ls.txt res/test-built-container-two_cmds.txt
test_test_built_container $FAILURE res/test-built-container-dockerfile_false.txt
test_test_built_container $FAILURE res/test-built-container-dockerfile_false.txt res/test-built-container-cmd_empty.txt
test_test_built_container $FAILURE res/test-built-container-dockerfile_r_pkg_failure.txt
test_test_built_container $SUCCESS res/test-built-container-dockerfile_r_pkg_success.txt
