#!/bin/bash
# vi: fdm=marker

##################
# Constants {{{1 #
##################

PROG_NAME=$(basename $0)
YES=yes

# Set grep & sed commands
if [ -z "$MAKE_VERSIONS_GREP" ] ; then
	MAKE_VERSIONS_GREP=grep
fi
if [ -z "$MAKE_VERSIONS_SED" ] ; then
	MAKE_VERSIONS_SED=sed
fi

###################
# Print help {{{1 #
###################

function print_help {
	echo "Usage: $PROG_NAME [options]"
	echo
	echo "   -g, --debug                Debug mode."
	echo "   -h, --help                 Print this help message."
}

############
# Msg {{{1 #
############

function msg {

	local tag=$1
	shift
	local code_level=1
	is_numeric=$(echo $1 | grep '^[0-9]*$')
	if [ -n "$is_numeric" ] ; then
		code_level=$1
		shift
	fi
	local msg=$1

	# Check tag
	if [ -z "$tag" -o \( "$tag" != INFO -a "$tag" != DEBUG -a "$tag" != ERROR \) ] ; then
		echo "ERROR: Unvalid message tag \"$tag\"." >&2
		exit 999
	fi

	# Print message
	[ $tag = DEBUG -a $DEBUG -lt $code_level ] || echo "$tag: $msg" >&2

	# Exit
	[ $tag = ERROR ] && exit $code_level
}

#########################
# Extract versions {{{1 #
#########################

function extract_versions {

	versions=()

	# Loop on all version variables
	for version_var in TOOL_VERSION CONTAINER_VERSION ; do

		# Look for lines containing version definition
		for cmd in 'ENV' LABEL ; do
			line=$($MAKE_VERSIONS_GREP "^[[:space:]]*$cmd[[:space:]]*$version_var" Dockerfile)
			[ -n "$line" ] && break
		done
		[ -n "$line" ] || msg ERROR "Cannot find definition of $version_var inside Dockerfile file."

		# Extract definition of version variable
		version_def=$(echo $line | $MAKE_VERSIONS_SED -e "s/^.*[[:space:]]*\($version_var\)[[:space:]]*=[[:space:]]*\(.*\)$/\1=\2/")

		# Add definiton to array
		versions+=($version_def)
	done

	# Output versions
	printf "%s\n" "${versions[@]}" >PhenoMeNal_Versions.txt
}

#############
# MAIN {{{1 #
#############

# Test presence of Dockerfile
[ -f Dockerfile ] || msg ERROR "No Dockerfile !"

# Extract versions
extract_versions
