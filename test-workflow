#!/bin/bash
# vi: fdm=marker

# Constants {{{1
################################################################

PROG_NAME=$(basename $0)
PROG_PATH=$(dirname $0)
YES=yes
NO=no
CNTGLX_REPOS_NAME=container-galaxy-k8s-runtime
CNTGLX_GITHUB=https://github.com/phnmnl/$CNTGLX_REPOS_NAME

# Global variables {{{1
################################################################

WORKFLOW_FILE=
WORKFLOW_NAME=${WORKFLOW_NAME:-}
export GALAXY_API_KEY=${GALAXY_API_KEY:-}
export GALAXY_URL=${GALAXY_URL:-}
CNTGLX_BRANCH=${CNTGLX_BRANCH:-}
WFT4GALAXY_DOCKER=$YES
WFT4GALAXY_REPOS_NAME=wft4galaxy
WFT4GALAXY_REPOS=phnmnl/$WFT4GALAXY_REPOS_NAME
WFT4GALAXY_GITHUB=https://github.com/$WFT4GALAXY_REPOS
WFT4GALAXY="$PWD/wft4galaxy-docker"
WFT4GALAXY_BRANCH='develop'
INSTALL_VIRTUALENV=$NO

# Print help {{{1
################################################################

function print_help {
	echo "Usage: $PROG_NAME [options]"
	echo
	echo "Run test on a PhenoMeNal workflow."
	echo
	echo "Options:"
	echo "   -b, --cntglx-branch        Set the branch to clone from $CNTGLX_REPOS_NAME repository."
	echo "   -h, --help                 Print this help message."
	echo "   -k, --key                  Set Galaxy API key."
	echo "   -s, --wft4galaxy-sources   Use GitHub sources of wft4galaxy instead of docker."
	echo "   -u, --url                  Set Galaxy URL."
	echo "   -v, --install-virtualenv   If virtualenv is missing, install it inside user site-package."
	echo "   -w, --workflow             Set the workflow name to test."
}

# Error {{{1
################################################################

function error {

	local msg=$1

	echo "ERROR: $msg" >&2

	exit 1
}

# Debug {{{1
################################################################

function debug {

	local dbgmsg="$1"

	[[ $DEBUG -ge 1 ]] && echo "[DEBUG] $dbgmsg" >&2
}


# Read args {{{1
################################################################

function read_args {

	local args="$*" # save arguments for debugging purpose
	
	# Read options
	while true ; do
		shift_count=1
		case $1 in
			-b|--cntglx-branch)         CNTGLX_BRANCH="$2" ; shift_count=2 ;;
			-h|--help)                  print_help ; exit 0 ;;
			-k|--key)                   GALAXY_API_KEY="$2" ; shift_count=2 ;;
			-s|--wft4galaxy-sources)    WFT4GALAXY_DOCKER=$NO ;;
			-u|--url)                   GALAXY_URL="$2" ; shift_count=2 ;;
			-v|--install-virtualenv)    INSTALL_VIRTUALENV=$YES ;;
			-w|--name)                  WORKFLOW_NAME="$2" ; shift_count=2 ;;
			-) error "Illegal option $1." ;;
			--) error "Illegal option $1." ;;
			--*) error "Illegal option $1." ;;
			-?) error "Unknown option $1." ;;
			-[^-]*) split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift $shift_count
	done
	shift $((OPTIND - 1))

	# Read remaining arguments
	[ $# -eq 0 ] || error "No remaining arguments are accepted."

	# Check arguments
	[[ -n $WORKFLOW_NAME ]] || error "You must provide a workflow name."
	[[ -n $GALAXY_URL ]] || error "You must provide a URL to running Galaxy instance."
	[[ -n $GALAXY_API_KEY ]] || error "You must provide a valid API key to the running Galaxy instance."
	[[ -n $CNTGLX_BRANCH ]] || error "You must provide a valid branch for the $CNTGLX_REPOS_NAME repository."

	# Debug
	debug "Arguments are : $args"
}

# Clone container galaxy repos {{{1
################################################################

clone_cntglx_repos() {

	rm -rf "$CNTGLX_REPOS_NAME"
	git clone --depth 1 --single-branch -b "$CNTGLX_BRANCH" "$CNTGLX_GITHUB" || error "Cloning of branch \"$CNTGLX_BRANCH\" of repository \"$CNTGLX_GITHUB\" failed."
}

# Run test {{{1
################################################################

run_test() {

	# Get YAML
	local yaml_filename="$WORKFLOW_NAME-test.yml"
	local yaml_filepath="$CNTGLX_REPOS_NAME/workflows-test-data/$yaml_filename"
	[[ -f $yaml_filepath ]] || error "Unable to find test YAML file \"$yaml_filepath\"."
	echo "Found YAML test file \"$yaml_filepath\"."

	# Copy workflow file
	local workflow_filename=$(grep 'file:' "$yaml_filepath" | head -n 1 | sed 's/^.*"\(.*\)".*$/\1/')
	cp "$WORKFLOW_FILE" "$CNTGLX_REPOS_NAME/workflows-test-data/$workflow_filename"

	# Call wft4galaxy
	cd "$CNTGLX_REPOS_NAME/workflows-test-data"
	"$WFT4GALAXY" --server "$GALAXY_URL" --api-key "$GALAXY_API_KEY" -f "$yaml_filename" --debug
}

# Install wft4galaxy {{{1
################################################################

install_wft4galaxy() {

	# Install docker
	if [[ $WFT4GALAXY_DOCKER == $YES ]] ; then

		curl -s https://raw.githubusercontent.com/$WFT4GALAXY_REPOS/$WFT4GALAXY_BRANCH/utils/docker/install.sh | bash /dev/stdin .
		chmod +x "$WFT4GALAXY"

	# install from sources
	else

		rm -rf "$WFT4GALAXY_REPOS_NAME"
		git clone -b "$WFT4GALAXY_BRANCH" --depth 1 --single-branch "$WFT4GALAXY_GITHUB" || error "Cloning of branch \"$WFT4GALAXY_BRANCH\" of repository \"$WFT4GALAXY_GITHUB\" failed."
		cd "$WFT4GALAXY_REPOS_NAME"
		if [[ $INSTALL_VIRTUALENV == $YES ]] ; then
			local virtualenv=$(which virtualenv)
			if [[ -z $virtualenv ]] ; then
				easy_install --user virtualenv
			fi
			virtualenv venv
			source venv/bin/activate
		fi
		pip install -r requirements.txt
		python setup.py install
		WFT4GALAXY=wft4galaxy
		cd ..
	fi
}

# Set workflow file {{{1
################################################################

set_workflow_file() {
	WORKFLOW_FILE="$CNTGLX_REPOS_NAME/workflows/Galaxy-Workflow-$WORKFLOW_NAME.ga"
	[[ -f "$WORKFLOW_FILE" ]] || error "No workflow file \"$WORKFLOW_FILE\" exists."
}

# Check workflow {{{1
################################################################

check_workflow() {

	# Get UUID from .ga file
	local uuid=$(grep uuid "$WORKFLOW_FILE" | head -n 1 | sed 's/^.*"uuid": "\([^"]*\)".*$/\1/')
	[[ -n "$uuid" ]] || error "Cannot find UUID of workflow \"$WORKFLOW_NAME\"."

	# Check that this workflow is in the running instance
	# https://publicdev.phenomenal-h2020.eu/api/workflows?key=fa0d2fbe8112a5dfe1ed5350111b6f04&show_published=true
	local is_in_instance=$(wget -q -O - "$GALAXY_URL/api/workflows?key=fa0d2fbe8112a5dfe1ed5350111b6f04&show_published=true" | grep "\"$uuid\"")
	[[ -n "$is_in_instance" ]] || error "Workflow \"$WORKFLOW_NAME\" with UUID \"$uuid\" was not found inside running instance \"$GALAXY_URL\"."

	echo "Found workflow \"$WORKFLOW_NAME\" with UUID \"$uuid\" in running instance \"$GALAXY_URL\"."
}

# Main {{{1
################################################################

read_args "$@"

clone_cntglx_repos
set_workflow_file
check_workflow
install_wft4galaxy
run_test
